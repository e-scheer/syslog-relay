# reference: https://www.rsyslog.com/monitoring-rsyslogs-impstats-with-kibana-and-spm/
module(load="mmnormalize")
module(load="omelasticsearch")

# pushes metrics to the stats ruleset every x seconds, in JSON
module(load="impstats"
    interval="10"
    resetCounters="on"
    severity="3"
    format="json-elasticsearch"
    ruleset="stats")

#### MODULES ####
module(
    load="imudp" # threads to process incoming messages
    threads="1" #  no more than CPUs/Cores
    timeRequery="2" # obtain the precise time only once every n-times for timestamps (1 to 10)
    batchSize="32" # number of messages obtained with a single OS call (32 to 128)
)

#### LISTENER ####
# UDP 
input(type="imudp" port="514" ruleset="sendRemote")

#### DEFAULT RULE ####
# make gtls driver the default and set certificate files
global(
    workDirectory="/var/lib/rsyslog"
    DefaultNetstreamDriver="gtls"
    DefaultNetstreamDriverCAFile=`echo $CA_CERT_FILE`
    DefaultNetstreamDriverCertFile=`echo $CLIENT_CERT_FILE`
    DefaultNetstreamDriverKeyFile=`echo $CLIENT_KEY_FILE`
)

#### TEMPLATE ####
# see https://serverfault.com/questions/767399/how-can-i-add-values-to-structured-data-with-rsyslog
# template string is a tweaked version of 'template_SyslogProtocol23Format'
template(
    name="metadata_syslog"
    type="string"
    string="<%PRI%>1 %timegenerated:::date-rfc3339% %HOSTNAME% %APP-NAME% %PROCID% %MSGID% [%STRUCTURED-DATA:R,ERE,1,FIELD:\\[([^]]*)\\]--end% timereported=%timereported%] %msg%\n"
)

# defines how the final Elasticsearch JSON documents will look like
# contains the timestamp, the host name and all the fields from the JSON generated by impstats
template(name="rsyslog_stats" type="list") {
    constant(value="{")
    constant(value="\"@timestamp\":\"")    
    property(name="timereported" dateFormat="rfc3339")
    constant(value="\",\"host\":\"")      
    property(name="hostname")
    constant(value="\",")                 
    property(name="$!all-json" position.from="2")
}

#### MAIN QUEUE ####
main_queue(
    queue.type="linkedlist" # housekeeping structures are dynamically allocated
    queue.size="100" # the maximum size of the queue in number of messages (messages takes up 512 bytes on average (in-memory, not on the wire))
    queue.workerThreads="1" # worker threads that can be run parallel (if >1 then no guarantee of order)
    queue.dequeueBatchSize="10" # maximum batch size for dequeue operations
    queue.discardMark="80" # threshold (not in %) at which rsyslog begins to discard less important messages
    queue.discardSeverity="4" # messages with severity greater or equal (numerically) to this value are discarded
)

#### FORWARDING RULE ####
ruleset(name="sendRemote" parser=["rsyslog.rfc3164"])  {
    action(
        queue.type="direct" # direct mode does neither queue nor buffer any of the queue elements but rather passes the element directly
        name="send_remote"
        type="omfwd" # built-in module, no need to load
        template="metadata_syslog"
        target="192.168.1.49" port="10514"
        protocol="tcp"
        action.resumeRetryCount="-1" # infinite retries if host is down
        StreamDriver="gtls"
        StreamDriverMode="1" # run driver in TLS-only mode
        StreamDriverAuthMode="x509/name" # server authenticated by CN (use 'anon' otherwise)
        StreamDriverPermittedPeers="*.ciscorelay.debug"
    )
}

# processes logs independently of other flows in rsyslog 
ruleset(name="stats" queue.type="linkedlist" queue.size="500") {
    # parses the JSONs generated by impstats
    action(
        name="parse_rsyslog_stats"
        type="mmnormalize"
        rule=["rule=:%data:json%"])

    # sends the final JSON documents
    action(
        name="push_rsyslog_stats"
        type="omelasticsearch"
        searchIndex="rsyslog-stats"
        server="192.168.1.55"
        serverport="9200"
        template="rsyslog_stats"
        esVersion.major="8" # comment this line if bulkmode off
        bulkmode="on" # disable if rsyslog version below v.8.206 (or keep it but lower elasticsearch to below v8)
        action.resumeRetryCount="-1"
        action.resumeInterval="60")
}