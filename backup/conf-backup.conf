#### Modules ####
module(load="imudp")       # UDP listener support


#### LISTENER ####
input(type="imudp" port="514" ruleset="sendRemote") # start an UDP listener 


#### DEFAULT RULE ####
# make gtls driver the default and set certificate files
global(
    workDirectory="/var/lib/rsyslog"
    DefaultNetstreamDriver="gtls"
    DefaultNetstreamDriverCAFile="/etc/ssl/rsyslog/ca-cert.pem"
    DefaultNetstreamDriverCertFile="/etc/ssl/rsyslog/server-cert.pem"
    DefaultNetstreamDriverKeyFile="/etc/ssl/rsyslog/server-key.pem"
)

# The default rule set is used by all inputs which do not have
# an explicit rule set bound.
# In our case, this means everything but the udp server.
# As such, regular log messages are written to local files.
# If required, the call statement to sendRemote can be used:
# local messages are both recorded in local files and forwarded to the listener.


#### FORWARDING RULE ####

ruleset(name="sendRemote" parser=["rsyslog.rfc5424","rsyslog.rfc3164"]) { # parser chain, try the RFC5424 parser first and after it the RFC3164 parser
    action(
        type="omfwd"
        template="RSYSLOG_SyslogProtocol23Format" # the format specified in IETFâ€™s internet-draft ietf-syslog-protocol-23, which is very close to the actual syslog standard RFC5424
        target="host.docker.internal" port="10514"
        protocol="tcp"
        action.resumeRetryCount="-1" # infinite retries if host is down
        queue.type="linkedList" # run asynchronously
        queue.saveOnShutdown="on" # ensures that any queue elements are saved to disk before it terminates.
        queue.maxDiskSpace="1g" # 1gb space limit (use as much as possible)
        queue.fileName="safqueue" # unique name prefix for spool files (store and forward queue)
        StreamDriver="gtls"
        StreamDriverMode="1" # run driver in TLS-only mode
        StreamDriverAuthMode="x509/name"
        
    )
}